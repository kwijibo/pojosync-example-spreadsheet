{
  "name": "pojosync",
  "version": "0.0.3",
  "description": "syncing js objects across clients and server with socket.io",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "jasmine-node test/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/kwijibo/pojosync"
  },
  "keywords": [
    "pojo",
    "object",
    "sharing",
    "sockets"
  ],
  "dependencies": {
    "socket.io": "0.9.16"
  },
  "author": {
    "name": "Keith Alexander"
  },
  "license": "BSD",
  "readmeFilename": "README.mkd",
  "readme": "Syncing POJOs between clients/browsers, and your node.js server, with socket.io\n\n##What it does\n\nThis library allows you to keep data objects up to date between multiple\nclients and a server. \n\n## How it works\n\nOnce you have shared an object with\n`Client.put(object)`, it (and any other objects it refers to) is assigned an ID, flattened for transport, and pushed to the server. Shared objects are then broadcast to all connected clients.\n\n##Usage\n\n\n###Server\n\nExample use with express.js. (For alternate socket.io setups, see\n[socket.io's How To](http://socket.io/#how-to-use) . )\n\n       var pojosync = require('pojosync')\n         , app = express()\n         , server = require('http').createServer(app)\n         , io = require('socket.io').listen(server, {log:false})\n         , Dataserver = new pojosync.Server(io);\n\n\n###Client\n\n(Use [browserify](http://browserify.org/) to create a file for use in browser, then reference it with a script tag. \nYou will also need to add:\n\n    <script src=\"/socket.io/socket.io.js\"></script>\n\n    var pojo = require('pojosync');\n    var Client = new pojo.Client();\n    var flossy = { type: 'Sheep', name: 'Flossy', age: 3 };\n    Client.put(flossy); \n\n Saves `flossy` to the server and shares the object with other clients.\n\n\n    var farms = Client.list({type: 'Farm'}, optional_callback); \n\n\n`farms` will initially be an empty array, but will fill with data once\nthe server has returned it.\n\n    flossy.farm = {type:'Farm', name: 'Greenacres' };\n    Client.put(flossy);\n\n`farms` will then include the new object, and `flossy` will be updated on\nall clients.\n\n## API\n\n\n#### Client.put \n\nTakes an object and shares it with the server (which\nbroadcasts it to other clients). The object can be new, or a locally\nupdated version of an already-shared object.\n\n#### Client.list\n\nTakes an object pattern and returns an array of any objects matching\nthat pattern. This array will be kept up to date as objects are\n`.put`.\n\n\n##Storage\n\nCurrently data is simply persisted on your server as a JSON file. This\nis simple but has its limitations - all the data must be loaded into\nmemory at once. It should not be difficult to add persistence to other\nbackends, such as MongoDB.\n\n",
  "_id": "pojosync@0.0.3",
  "dist": {
    "shasum": "7e0fce016d5f18fd30da4d7cb9b9c0517fc12690"
  },
  "_from": "pojosync@0.0.3",
  "_resolved": "https://registry.npmjs.org/pojosync/-/pojosync-0.0.3.tgz"
}
